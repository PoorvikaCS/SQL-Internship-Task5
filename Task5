-- Drop tables if they already exist
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Customers;

-- Step 1: Create Tables
CREATE TABLE Customers (
    customer_id INTEGER PRIMARY KEY,
    customer_name TEXT
);

CREATE TABLE Orders (
    order_id INTEGER PRIMARY KEY,
    customer_id INTEGER,
    product TEXT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Step 2: Insert Sample Data
-- Note: We are including customer_id = 5 to satisfy foreign key constraint
INSERT INTO Customers (customer_id, customer_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David'),
(5, 'Eve');  -- Added to prevent foreign key error

INSERT INTO Orders (order_id, customer_id, product) VALUES
(101, 1, 'Laptop'),
(102, 2, 'Tablet'),
(103, 1, 'Mouse'),
(104, 5, 'Phone');  -- Now valid since customer_id = 5 exists

-- Step 3: INNER JOIN - only matching records
SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.product
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;

-- Step 4: LEFT JOIN - all customers, with orders if any
SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.product
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- Step 5: RIGHT JOIN simulation (not supported directly in SQLite)
-- We reverse LEFT JOIN to simulate RIGHT JOIN
SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.product
FROM Orders o
LEFT JOIN Customers c ON o.customer_id = c.customer_id;

-- Step 6: FULL OUTER JOIN simulation using UNION of LEFT + RIGHT JOINs
SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.product
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id

UNION

SELECT 
    c.customer_id,
    c.customer_name,
    o.order_id,
    o.product
FROM Orders o
LEFT JOIN Customers c ON o.customer_id = c.customer_id;
